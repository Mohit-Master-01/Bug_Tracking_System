@using Newtonsoft.Json
@model IEnumerable<Bug_Tracking_System.Models.AuditLog>

@{
    ViewData["Title"] = "Audit Logs";

    var moduleUsage = Model
        .GroupBy(x => x.ModuleName)
        .Select(g => new { ModuleName = g.Key, Count = g.Count() })
        .ToList();

    var moduleLabels = moduleUsage.Select(m => m.ModuleName).ToList();
    var moduleData = moduleUsage.Select(m => m.Count).ToList();

    var peakHours = Model
        .GroupBy(x => x.ActionDate.Hour)
        .Select(g => new { Hour = g.Key, Count = g.Count() })
        .OrderBy(g => g.Hour)
        .ToList();

    var peakHoursLabels = peakHours.Select(p => $"{p.Hour}:00").ToList();
    var peakHoursData = peakHours.Select(p => p.Count).ToList();
}

<style>
    .dataTables_length select {
        padding-right: 25px !important;
        width: 80px;
    }

    .charts-section {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
        width: 100%;
        margin-top: 30px;
    }

    .chart-card {
        flex: 1 1 48%;
        display: flex;
        flex-direction: column;
    }

    .chart-container {
        position: relative;
        width: 100%;
        height: 350px;
    }

    canvas {
        width: 100% !important;
        height: 100% !important;
    }

    media (max-width: 768px) {
        .chart-card

    {
        flex: 1 1 100%;
    }

    }


    /* Restrict Pie Chart Container */
    #modulePieChart {
        max-width: 350px;
        margin: 0 auto; /* Center the chart */
    }

    /* Optional: Remove forceful width/height that affects aspect ratio */
    canvas {
        width: auto !important;
        height: auto !important;
    }

    .chart-scroll-container {
        width: 100%;
        overflow-x: auto; /* Enable horizontal scroll */
    }

</style>

<div class="container-fluid py-4">
    <div class="row">
        <div class="col-lg-12">
            <div class="card">
                <div class="card-header pb-0 d-flex justify-content-between align-items-center">
                    <h6>Audit Logs</h6>

                    <div class="d-flex align-items-center gap-2">
                        <!-- Screenshot Button -->
                        <button id="download-image" class="btn btn-success btn-sm" data-bs-toggle="tooltip" data-bs-placement="top" title="Download Audit Log Stats As Image">
                            <i class="fas fa-image"></i>
                        </button>

                        <!-- PDF Button -->
                        <button id="download-pdf" class="btn btn-danger btn-sm" data-bs-toggle="tooltip" data-bs-placement="top" title="Download Audit Log Stats As PDF">
                            <i class="fas fa-file-pdf"></i>
                        </button>

                        <!-- Clear Logs -->
                        <button class="btn btn-danger btn-sm" onclick="clearLogs()">Clear Logs</button>
                    </div>
                </div>

                <div class="card-body px-3 py-3">

                    <div class="row mb-3">
                        <div class="col-md-3">
                            <label class="form-label">Date From</label>
                            <input type="date" id="fromDate" class="form-control" />
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Date To</label>
                            <input type="date" id="toDate" class="form-control" />
                        </div>

                        <div class="col-md-3 d-flex align-items-end">
                            <button id="applyFilter" class="btn btn-primary me-2" style="margin:unset">Apply</button>
                            <button id="clearFilter" class="btn btn-secondary" style="margin:unset">Clear</button>
                        </div>
                    </div>

                    <div class="table-responsive">
                        <table id="auditLogTable" class="table align-items-center mb-0">
                            <thead>
                                <tr>
                                    <th>User</th>
                                    <th>Action</th>
                                    <th>Module</th>
                                    <th>Date</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var log in Model)
                                {
                                    <tr>
                                        <td>@log.User.UserName</td>
                                        <td>@log.Action</td>
                                        <td>@log.ModuleName</td>
                                        <td>
                                            <span data-order="@log.ActionDate.ToString("yyyy-MM-ddTHH:mm")">
                                                @log.ActionDate.ToString("dd-MM-yyyy | HH:mm")
                                            </span>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="dashboard-content">
        <!-- Charts Section -->
        <div class="charts-section">
            <!-- Pie Chart - Module Usage -->
            <div class="card chart-card">
                <div class="card-header pb-0">
                    <h6>Module Usage</h6>
                </div>
                <div class="card-body">
                    <div class="chart-container" style="max-width: 350px; margin: 0 auto;">
                        <canvas id="modulePieChart"></canvas>
                    </div>

                </div>
            </div>

            <!-- Curve Graph - Peak Login Hours -->
            <div class="card chart-card">
                <div class="card-header pb-0">
                    <h6>Peak Login Hours (Curve)</h6>
                </div>
                <div class="card-body">
                    <div class="chart-scroll-container">
                        <canvas id="peakHoursChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- JS and Chart Libraries -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<link rel="stylesheet" href="https://cdn.datatables.net/1.13.6/css/dataTables.bootstrap5.min.css">
<script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
<script src="https://cdn.datatables.net/1.13.6/js/dataTables.bootstrap5.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/html2canvas@1.4.1/dist/html2canvas.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.1/html2pdf.bundle.min.js"></script>



<script>
      // DataTables Initialization
    var table = $('#auditLogTable').DataTable({
        "order": [[3, "desc"]],
        "paging": true,
        "searching": true,
        "language": {
            "paginate": {
                "previous": "<",
                "next": ">"
            }
        }
    });

    // Add custom filtering function to DataTables
    $.fn.dataTable.ext.search.push(function (settings, data, dataIndex) {
        const fromDate = $('#fromDate').val();
        const toDate = $('#toDate').val();

        const $row = $(table.row(dataIndex).node());
        const joinDateText = $row.find('td:eq(3)').text().split('|')[0].trim();

        if (!joinDateText) return false;

        const parts = joinDateText.split('-'); // dd-MM-yyyy
        const rowDate = new Date(`${parts[2]}-${parts[1]}-${parts[0]}`);
        const from = fromDate ? new Date(fromDate) : null;
        const to = toDate ? new Date(toDate) : null;

        if ((from && rowDate < from) || (to && rowDate > to)) {
            return false;
        }

        return true;
    });

    // Apply Filter
    $('#applyFilter').on('click', function () {
        table.draw();
    });

    // Clear Filter
    $('#clearFilter').on('click', function () {
        $('#roleFilter').val('');
        $('#fromDate').val('');
        $('#toDate').val('');
        table.draw();
    });

    

       document.getElementById("download-image").addEventListener("click", function () {
        const element = document.getElementById("dashboard-content");

        html2canvas(element, {
            scale: 2,
            useCORS: true
        }).then(canvas => {
            const link = document.createElement("a");
            const fileName = `Bugify_AuditLog.png`;
            link.download = fileName;
            link.href = canvas.toDataURL("image/png");
            link.click();
        });
    });

        document.getElementById("download-pdf").addEventListener("click", function () {
        const element = document.getElementById("dashboard-content");
        const fileName = `Bugify_AuditLog.pdf`;

        const opt = {
            margin:       0.3,
            filename:     fileName,
            image:        { type: 'jpeg', quality: 1 },
            html2canvas:  { scale: 2, useCORS: true, scrollY: 0 },
            jsPDF:        { unit: 'pt', format: 'a4', orientation: 'landscape' },
            pagebreak:    { mode: ['avoid-all', 'css', 'legacy'] }
        };

        html2pdf().set(opt).from(element).save();
    });


    // Chart Data
    var moduleLabels = @Html.Raw(JsonConvert.SerializeObject(moduleLabels));
    var moduleData = @Html.Raw(JsonConvert.SerializeObject(moduleData));

    var peakHoursLabels = @Html.Raw(JsonConvert.SerializeObject(peakHoursLabels));
    var peakHoursData = @Html.Raw(JsonConvert.SerializeObject(peakHoursData));

        // Module Usage - Pie Chart (with maintainAspectRatio and fixed size)
    new Chart(document.getElementById('modulePieChart').getContext('2d'), {
        type: 'pie',
        data: {
            labels: moduleLabels,
            datasets: [{
                data: moduleData,
                backgroundColor: [
                    '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0',
                    '#9966FF', '#FF9F40', '#E7E9ED', '#00A36C',
                    '#E34234', '#3D9970'
                ],
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: true,  // Ensures circular shape
            plugins: {
                legend: {
                    position: 'bottom',
                    labels: { color: '#344767', font: { size: 12 } }
                }
            }
        }
    });

    // Peak Hours - Curve Chart
    new Chart(document.getElementById('peakHoursChart').getContext('2d'), {
        type: 'line',
        data: {
            labels: peakHoursLabels,
            datasets: [{
                label: 'Login Count',
                data: peakHoursData,
                fill: true,
                borderColor: '#36A2EB',
                backgroundColor: 'rgba(54, 162, 235, 0.2)',
                tension: 0.4,
                pointRadius: 4,
                pointHoverRadius: 6
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: { position: 'top' }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: { color: '#344767' }
                },
                x: {
                    ticks: { color: '#344767' }
                }
            }
        }
    });

    // Clear Logs Function with Password Check
    function clearLogs() {
        Swal.fire({
            title: 'Enter Password to Clear Logs',
            input: 'password',
            inputLabel: 'Confirm your password',
            inputPlaceholder: 'Enter your password',
            inputAttributes: {
                autocapitalize: 'off',
                autocomplete: 'off'
            },
            showCancelButton: true,
            confirmButtonText: 'Clear Logs',
            showLoaderOnConfirm: true,
            preConfirm: (password) => {
                if (!password) {
                    Swal.showValidationMessage('Password is required!');
                    return false;
                }
                const csrfToken = $('input[name="__RequestVerificationToken"]').val() || '';
                return fetch('/AuditLogs/ClearLogs', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        ...(csrfToken && { 'X-CSRF-TOKEN': csrfToken })
                    },
                    body: JSON.stringify({ confirmPassword: password })
                })
                    .then(response => {
                        if (!response.ok) throw new Error('Network error');
                        return response.json();
                    })
                    .then(data => {
                        if (!data.success) throw new Error(data.message);
                        return data;
                    })
                    .catch(error => {
                        Swal.showValidationMessage(`Error: ${error.message}`);
                    });
            },
            allowOutsideClick: () => !Swal.isLoading()
        }).then((result) => {
            if (result.isConfirmed && result.value) {
                Swal.fire('Success!', result.value.message, 'success').then(() => location.reload());
            }
        });
    }
</script>
