@model Bug_Tracking_System.Models.Bug

@{
    ViewData["Title"] = "Bug Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>

    /* Severity Colors */
    [data-severity="Critical"]::before {
    content: "Critical";
    background: #dc3545;
    }

    [data-severity="Major"]::before {
    content: "Major";
    background: #ffc107;
    }

    [data-severity="Minor"]::before {
    content: "Minor";
    background: #007bff;
    }

    [data-severity="Low"]::before {
    content: "Low";
    background: #28a745;
    }

    /* Priority Colors */
    [data-priority="Highest"]::before {
    content: "Highest";
    background: #dc3545;
    }

    [data-priority="High"]::before {
    content: "High";
    background: #ffc107;
    }

    [data-priority="Medium"]::before {
    content: "Medium";
    background: #007bff;
    }

    [data-priority="Low"]::before {
    content: "Low";
    background: #28a745;
    }

    [data-priority="Lowest"]::before {
    content: "Lowest";
    background: #6c757d;
    }

    /* Status Colors */
    [data-status="Assigned"]::before {
    content: "Assigned";
    background: #00d0e1;
    }

    [data-status="Design issue"]::before {
    content: "Design issue";
    background: #a94200
    }

    [data-status="Discuss"]::before {
    content: "Discuss";
    background: #ff0000;
    }

    [data-status="Fixed"]::before {
    content: "Fixed";
    background: #28a745;
    }

    [data-status="New"]::before {
    content: "New";
    background: #03037a;
    }

    [data-status="Not a bug"]::before {
    content: "Not a bug";
    background: #f3ff36;
    }

    /* Badge Styling */
    [data-severity]::before, [data-priority]::before, [data-status]::before {
    color: white;
    padding: 5px 10px;
    border-radius: 5px;
    font-weight: bold;
    display: inline-block;
    }



    .table th, .table td {
    text-align: center; /* Align text to center */
    vertical-align: middle; /* Align items vertically */
    padding: 10px; /* Add consistent padding */
    }

    td[data-severity], td[data-priority], td[data-status] {
    min-width: 100px; /* Ensure uniform column width */
    }

    td:last-child div {
    display: flex;
    gap: 10px;
    justify-content: center;
    }

</style>

<div class="container-sm" style="max-width: 1100px;">
    <div class="card shadow-sm">
        <div class="card-header  text-white">
            <h4 class="mb-0 text-xxl">Bug Details</h4>
            <button class="btn btn-sm btn-success" onclick="addToGoogleCalendar(@Model.BugId)">
                Add to Google Calendar
            </button>


        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    <h6 class="text-muted">Title</h6>
                    <p class="font-weight-bold text-sm">@Model.Title</p>

                    <h6 class="text-muted">Description</h6>
                    <p class="text-sm">@Html.Raw(Model.Description)</p>

                    <h6 class="text-muted">Severity</h6>
                    <p data-severity="@(Model.Severity ?? "Not Assigned")" class="text-sm">

                    </p>

                    <h6 class="text-muted">Priority</h6>
                    <p data-priority="@(Model.Priority ?? "Not Assigned")" class="text-sm">

                    </p>
                </div>
                <div class="col-md-6">
                    <h6 class="text-muted">Created Date</h6>
                    <p class="text-sm">@Model.CreatedDate</p>

                    <h6 class="text-muted">Created By</h6>
                    <p class="text-sm">@Model.CreatedByNavigation?.UserName</p>

                    <h6 class="text-muted">Project</h6>
                    <p class="text-sm">@Model.Project?.ProjectName</p>

                    <h6 class="text-muted">Task Assignment</h6>
                    @if (Model.TaskAssignments.Any())
                    {
                        var task = Model.TaskAssignments.First();

                        <div class="mb-2">
                            <h6 class="text-muted">Assigned To</h6>
                            <p class="text-sm">@task.AssignedToNavigation.UserName</p>

                            <h6 class="text-muted">Project Manager</h6>
                            <p class="text-sm">@task.ProjectManager.UserName</p>

                            <h6 class="text-muted">Completion Date</h6>
                            <p class="text-sm">@(task.CompletionDate.HasValue ? task.CompletionDate.Value.ToString("dd MMM yyyy") : "Not Set")</p>
                        </div>
                    }
                    else
                    {
                        <p class="text-danger text-sm">No task assignment found for this bug.</p>
                    }


                    <h6 class="text-muted">Status</h6>
                    <!-- Status with Dropdown -->
                    <td>
                        @if (ViewBag.PermissionType != "canView")
                        {
                            <div class="dropdown">
                                <button class="btn btn-sm dropdown-toggle status-btn" data-id="@Model.BugId" data-status="@Model.Status?.StatusId" data-bs-toggle="dropdown" aria-expanded="false">
                                    @Model.Status?.StatusName
                                </button>
                                <ul class="dropdown-menu">
                                    @foreach (var status in ViewBag.StatusList)
                                    {
                                        <li>
                                            <a class="dropdown-item change-status" href="#" data-bug-id="@Model.BugId" data-status-id="@status.Value">@status.Text</a>
                                        </li>
                                    }
                                </ul>
                            </div>
                        }
                        

                    </td>
                </div>
            </div>

            <h5 class="mt-3 text-sm">Attachments</h5>
            <div class="d-flex flex-wrap">
                @if (Model.Attachments != null && Model.Attachments.Any())
                {
                    @foreach (var attachment in Model.Attachments)
                    {
                        <div class="p-2">
                            <a href="@Url.Content(attachment.FilePath)" target="_blank">
                                <img src="@Url.Content(attachment.FilePath)" class="img-thumbnail" style="width: 120px; height: 80px; object-fit: cover;">
                            </a>
                        </div>
                    }
                }
                else
                {
                    <p class="text-muted text-sm">No attachments available.</p>
                }
            </div>

            <div class="mt-3">

                @if (ViewBag.PermissionType != "canView")
                {
                    <a asp-action="SaveBug" asp-route-id="@Model?.BugId" class="btn btn-primary btn-sm">Edit</a>
                }
                else
                {
                    <p>------</p>
                }
                <a asp-action="BugList" class="btn btn-secondary btn-sm">Back to List</a>
            </div>
        </div>
    </div>
</div>

@section Scripts{
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
    <script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>

    <script>

                function addToGoogleCalendar(bugId) {
            $.post("/Bugs/AddBugToGoogleCalendar", { bugId: bugId }, function (response) {
                alert(response.message);
            });
        }


            $(".change-status").click(function (e) {
            e.preventDefault();

            var bugId = $(this).data("bug-id");
            var statusId = $(this).data("status-id");
            var button = $(".status-btn[data-id='" + bugId + "']");

            $.ajax({
                type: "POST",
                url: "/Bugs/UpdateStatus",
                data: { bugId: bugId, statusId: statusId },
                dataType: "json",
                success: function (response) {
                    if (response.success) {
                        button.text(response.newStatus);
                        Toastify({
                            text: response.message,
                            duration: 3000,
                            gravity: "top",
                            position: "right",
                            backgroundColor: "#28a745"
                        }).showToast();
                    } else {
                        Toastify({
                            text: "Failed to update status",
                            duration: 3000,
                            gravity: "top",
                            position: "right",
                            backgroundColor: "#dc3545"
                        }).showToast();
                    }
                },
                error: function () {
                    Toastify({
                        text: "Server error. Please try again.",
                        duration: 3000,
                        gravity: "top",
                        position: "right",
                        backgroundColor: "#dc3545"
                    }).showToast();
                }
            });
        });
    </script>
}