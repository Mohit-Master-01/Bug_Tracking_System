@model Bug_Tracking_System.Models.Bug

@{
    ViewData["Title"] = Model.BugId == 0 ? "Add a Bug" : "Edit Bug";
    string action = Model.BugId == 0 ? "Add" : "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}



<div class="container-fluid py-4">
    <div class="row">
        <div class="col-lg-9 mx-auto">
            <div class="card shadow-lg border-0">

                <div class="card-header text-white d-flex justify-content-between align-items-center">
                    <h4 class="mb-0">Report a Bug</h4>
                    <a class="btn btn-light"
                       data-bs-toggle="modal"
                       data-bs-target="#recents">
                        <i class="fas fa-upload me-1"></i>
                        Mass Import Bugs
                    </a>
                </div>

                <div class="card-body">
                    <form asp-action="SaveBug" id="BugForm" method="post" enctype="multipart/form-data">
                        <div asp-validation-summary="ModelOnly" class="alert alert-danger"></div>
                        <input type="hidden" asp-for="BugId" />

                        <!-- Module (Title) -->
                        <div class="mb-3">
                            <label class="form-label fw-bold">Module</label>
                            <input asp-for="Title" class="form-control border-1 shadow-sm" placeholder="Enter module name" />
                        </div>

                        <!-- Description with Quill Editor -->
                        <div class="mb-3">
                            <label asp-for="Description" class="form-label fw-bold">Description</label>
                            <div id="editor" class="border rounded p-2"></div>
                            <input type="hidden" asp-for="Description" id="Description" />
                        </div>

                        <!-- Severity -->
                        <div class="mb-3">
                            <label asp-for="Severity" class="form-label fw-bold">Severity</label>
                            <select asp-for="Severity" asp-items="new SelectList(ViewBag.Severity)" class="form-select shadow-sm">
                                <option value="" disabled selected>Select Severity</option>
                            </select>
                        </div>

                        <!-- Priority -->
                        <div class="mb-3">
                            <label asp-for="Priority" class="form-label fw-bold">Priority</label>
                            <select asp-for="Priority" asp-items="new SelectList(ViewBag.Priority)" class="form-select shadow-sm">
                                <option value="" disabled selected>Select Priority</option>
                            </select>
                        </div>

                        <!-- Status -->
                        <div class="mb-3">
                            <label asp-for="StatusId" class="form-label fw-bold">Status</label>
                            <select asp-for="StatusId" asp-items="ViewBag.Status" class="form-select shadow-sm">
                                <option value="">Select Status</option>
                            </select>
                        </div>

                        <!-- Tested By (Auto-filled from Session) -->
                        <div class="mb-3">
                            <label class="form-label fw-bold">Tested By</label>
                            <input type="text" class="form-control border-1 shadow-sm" value="@ViewBag.TestedBy" readonly />
                        </div>

                        <!-- Project -->
                        <div class="mb-3">
                            <label asp-for="ProjectId" class="form-label fw-bold">Project</label>
                            <select asp-for="ProjectId" asp-items="ViewBag.Projects" class="form-select shadow-sm">
                                <option value="" disabled selected>Select Project</option>
                            </select>
                        </div>

                        <!-- File Upload -->
                        <div class="mb-3">
                            <label class="form-label fw-bold">Attachments</label>
                            <input type="file" name="attachments" multiple class="form-control attachment-input shadow-sm" />
                            <small class="text-muted">Allowed: JPG ,JPEG ,PNG, PDF, DOCX (Max: 5MB each)</small>
                        </div>

                        @if (Model.Attachments != null && Model.Attachments.Any())
                        {
                            <div class="form-group m-3">
                                <label>Current Attachments</label>
                                <div class="d-flex flex-wrap">
                                    <!-- Keeps images side by side -->
                                    @foreach (var attachment in Model.Attachments)
                                    {
                                        <div class="position-relative m-2" style="display: inline-block;">
                                            <img src="@attachment.FilePath" alt="Bug Attachment" class="image-preview"
                                                 style="width: 120px; height: 120px; object-fit: cover; border-radius: 5px; border: 1px solid #ddd;" />

                                            <!-- Updated Remove Button -->
                                            <button type="button" class="btn btn-sm remove-attachment"
                                                    data-attachment-id="@attachment.AttachmentId"
                                                    style="position: absolute; top: 5px; right: 5px; width: 25px; height: 25px;
                                     line-height: 15px; font-size: 14px; padding: 0; text-align: center;
                                     border-radius: 50%; display: flex; justify-content: center; align-items: center; background: floralwhite">
                                                <i class="fa-solid fa-xmark" style="color: black"></i>
                                            </button>
                                        </div>
                                    }
                                </div>
                            </div>
                        }

                        @* <!-- File Upload --> *@
                        @* <div class="mb-3">   *@
                        @*     <label class="form-label fw-bold">Attachments</label>   *@
                        @*     <div id="dropzone" class="dropzone"></div>   *@
                        @* </div>   *@

                        @* <!-- Existing Attachments -->   *@
                        @* @if (Model.Attachments != null && Model.Attachments.Any())   *@
                        @* {   *@
                        @*     <div class="mb-3">   *@
                        @*         <label class="form-label fw-bold">Existing Attachments</label>   *@
                        @*         <div class="d-flex flex-wrap">   *@
                        @*             @foreach (var attachment in Model.Attachments)   *@
                        @*             {   *@
                        @*                 <div class="position-relative m-2">   *@
                        @*                     <img src="@attachment.FilePath" alt="Bug Attachment"   *@
                        @*                          class="image-preview"   *@
                        @*                          style="width: 120px; height: 120px; object-fit: cover; border-radius: 5px; border: 1px solid #ddd;" />   *@

                        @*                     <button type="button" class="btn btn-sm remove-attachment"   *@
                        @*                             data-attachment-id="@attachment.AttachmentId">   *@
                        @*                         <i class="fa-solid fa-xmark" style="color: black"></i>   *@
                        @*                     </button>   *@
                        @*                 </div>   *@
                        @*             }   *@
                        @*         </div>   *@
                        @*     </div>   *@
                        @* }   *@


                        <!-- Submit Button -->
                        <div class="text-center">
                            <button type="submit" id="btnBug" class="btn btn-primary btn-lg w-100 shadow-sm">
                                <span class="spinner-border spinner-border-sm d-none" id="btnLoader" role="status" aria-hidden="true"></span>
                                @action Bug
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@* Model For Bulk Bugs *@
<div class="modal fade" id="recents" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title fw-bold">Mass Import Bugs</h5>
                <button type="button"
                        class="close"
                        data-bs-dismiss="modal"
                        aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body text-center">
                <a href="/Bugs/DownloadSampleFile" class="btn btn-primary mb-3">
                    <i class="fas fa-download"></i> Download Sample File
                </a>

                <form id="uploadForm" enctype="multipart/form-data" class="p-3 border rounded shadow-sm bg-light">
                    <label for="excelFile" class="form-label fw-semibold">Upload Excel File</label>
                    <input type="file" id="excelFile" name="excelFile" class="form-control mb-3" required />

                    <label for="imageZip" class="form-label fw-semibold">Upload Image Zip File</label>
                    <input type="file" id="imageZip" name="imageZip" class="form-control mb-3" required />
                    <button type="submit" class="btn btn-success w-100">
                        <i class="fas fa-upload"></i> Submit
                    </button>
                </form>
            </div>

        </div>
    </div>
</div>

@section Scripts {

    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }


    <!-- Quill.js for Rich Text Editor -->
    <link href="https://cdn.jsdelivr.net/npm/quill@1.3.6/dist/quill.snow.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/quill@1.3.6/dist/quill.min.js"></script>

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
    <script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>

    <script src="~/js/Bugs.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/dropzone/5.9.3/min/dropzone.min.js"></script>

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" integrity="sha512-..." crossorigin="anonymous" referrerpolicy="no-referrer" />


    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>


    <script>
         $("#uploadForm").submit(function (e) {
            e.preventDefault();

            var formData = new FormData(this);

            $.ajax({
                url: "/Bugs/ImportBugsWithImages", // Replace with your controller
                type: "POST",
                data: formData,
                contentType: false,
                processData: false,
                success: function (response) {
                    if (response.success) {
                        Swal.fire({
                            icon: "success",
                            title: "Success!",
                            text: response.message,
                            showDenyButton: true,
                            confirmButtonText: "Download File",
                            denyButtonText: "Close"
                        }).then((result) => {
                            if (result.isConfirmed) {
                                // Trigger file download
                                var fileBytes = atob(response.fileData);
                                var blob = new Blob([new Uint8Array([...fileBytes].map(c => c.charCodeAt(0)))], { type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" });
                                var link = document.createElement("a");
                                link.href = window.URL.createObjectURL(blob);
                                link.download = response.fileName;
                                link.click();
                            }
                        });
                    } else {
                        Swal.fire({
                            icon: "error",
                            title: "Error!",
                            text: response.message,
                        });
                    }
                },
                error: function () {
                    Swal.fire({
                        icon: "error",
                        title: "Error!",
                        text: "Something went wrong. Please try again.",
                    });
                }
            });
        });



        Dropzone.autoDiscover = false;

            document.addEventListener("DOMContentLoaded", function () {
        if (document.getElementById("dropzone")) {
                var dropzone = new Dropzone("#dropzone", {
            url: "/Bugs/SaveBug",
            autoProcessQueue: false,
            uploadMultiple: true,
            parallelUploads: 10,
            maxFilesize: 5, // MB
            acceptedFiles: ".jpg,.jpeg,.png,.pdf,.docx",
            addRemoveLinks: true,
            paramName: "attachments",
            dictRemoveFile: "Remove",
            init: function () {
                var myDropzone = this;

                this.on("error", function (file, errorMessage) {
                    // Display toast or alert
                    Swal.fire({
                        icon: "error",
                        title: "Invalid File",
                        text: errorMessage,
                    });
                    myDropzone.removeFile(file);
                });

                this.on("addedfile", function (file) {
                    console.log("File added:", file.name);
                });

                this.on("removedfile", function (file) {
                    console.log("File removed:", file.name);
                });

                $("#BugForm").submit(function (e) {
                    e.preventDefault();
                    var formData = new FormData(this);

                    myDropzone.files.forEach((file) => {
                        formData.append("attachments", file, file.name);
                    });

                    $.ajax({
                        url: "/Bugs/SaveBug",
                        type: "POST",
                        data: formData,
                        processData: false,
                        contentType: false,
                        beforeSend: function () {
                            $("#btnBug").prop("disabled", true);
                        },
                        success: function (response) {
                            if (response.success) {
                                Swal.fire("Success!", "Bug saved successfully!", "success")
                                    .then(() => window.location.href = "/Bugs/BugList");
                            } else {
                                Swal.fire("Error!", "Could not save bug.", "error");
                                $("#btnBug").prop("disabled", false);
                            }
                        },
                        error: function () {
                            Swal.fire("Server Error!", "Please try again.", "error");
                            $("#btnBug").prop("disabled", false);
                        }
                    });
                });
            }
        });


                    }
        });
    </script>


}
